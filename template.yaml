---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Basic API - Lambda and Dynamodb using SAM
Globals:
  Function:
    Runtime: python3.6
    Timeout: 5
    MemorySize: 128
    Environment:
      Variables:
        STACKNAME: !Ref "AWS::StackName"
Resources:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        swagger: '2.0'
        info:
          title:
            Ref: AWS::StackName
        paths:
          /ping/{msg}:
            get:
              summary: ping me!
              parameters:
                - name: msg
                  in: path
                  required: true
                  schema:
                    type: string
              responses:
                '500':
                  description: Server Error
                  # headers:
                    # error_type:
                      # schema:
                        # type: string
                '200':
                  description: Execution status
                  content:
                    application/json:
                      schema:
                        type: object  # Attn: For documention this should be a $ref to a schema
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ping.Alias}/invocations
                passthroughBehavior: never
                httpMethod: POST
                type: aws
                responses:
                  default:
                    statusCode: 200
                    responseTemplates:
                      application/json: |
                        #set($inputData = $input.path('$'))
                        #if($inputData.statusCode > 0)
                        #set($context.responseOverride.status = $inputData.statusCode)
                        #end
                        #if($inputData.data != '')
                        $inputData.data
                        #else
                        $inputData
                        #end
                  .+:
                    statusCode: 500
                    # responseParameters:
                      # method.response.header.error_type: integration.response.body.errorType
                    responseTemplates:
                      application/json: |
                        #set($errorType = $input.path('$.errorType'))
                        #if($errorType == 'HTTPError')
                        #set($httpError = $util.parseJson($input.path('$.errorMessage')))
                        #set($context.responseOverride.status = $httpError.statusCode)
                        {"errorMessage": $httpError.data}
                        #else
                        {"errorMessage": $input.path('$.errorMessage'), "rawError": true}
                        #end
                requestTemplates:
                  application/json: |
                    {
                        "action": "ping",
                        "details": {
                            "msg": "$util.escapeJavaScript($input.params('msg')).replaceAll("\\'","'")"
                        }
                    }
  ping:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: ping.main
      AutoPublishAlias: dev
      Events:
        Endpoint:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /ping/{msg}
            Method: GET
Outputs:
  ApiURL:
    Description: API endpoint URL
    Export:
      Name: !Sub "${AWS::StackName}-Endpoint"
    Value: !Sub https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayApi.Stage}
